@model _744Project.ViewModels.NetworkViewModel

@{
    ViewBag.Title = "Network";
}
<link rel="stylesheet" type="text/css" href="http://cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.0/jquery.qtip.css">


<!--Here is where the popup MODAL javascript is going. This is for when the nodes are clicked on-->
<div class="modal fade" id="myModal" role="dialog">
	<div class="modal-dialog">

		<!-- Modal content-->
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Network Element Overview</h4>
			</div>
			<div id="NodePopup" class="modal-body">

			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
			</div>
		</div>

	</div>
</div>
<!-- End of Modal section -->



<div class="row">
    <div class="panel panel-default" style="margin-top:10px">
        <div class="panel-body">
            <div class="col-sm-4">
                <button class="PauseButton btn btn-danger">pause</button>
                <button class="PlayButton btn btn-success">play</button>
            </div>
            <div class="col-sm-4">
                <h3 style="text-align: center;vertical-align: middle;">Network Layout</h3>
            </div>
            <div class="col-sm-4" style=" display: flex; align-items: center; justify-content: center;">
                <input id="clickMe" style="display: block; margin-top: 10px;" class="btn btn-default" type="button" value="Save Configuration" onclick="exportPositions();" />
            </div>
        </div>
    </div>
</div>

<div class="panel panel-default" style=" height: 500px; width:100%;">
    <div id="cy" class="panel-body" style="height: 500px; width:100%;">
    </div>
</div>


<div class="panel panel-default">
    <div class="panel-body">
        <div class="row">
            <table class="table table-bordered">
                <tr><th>Transaction Id</th><th>Store Ip</th><th>Encrypted Amount</th><th>Action</th></tr>
                @foreach (var trans in Model.transactions)
                {
                    <tr>
                        <td>@trans.Id</td>
                        <td>@trans.storeIp</td>
                        <td>@trans.transactionAmount</td>
                        <td><button class="SendTransaction btn btn-default" id="@trans.storeIp">Send</button></td>
                    </tr>
                }
            </table>

        </div>
        <div class="col-sm-4" style="color:Red;text-align: center;vertical-align: middle; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
            Processing Center
        </div>
        <div class="col-sm-4" style="color:Blue;text-align: center;vertical-align: middle; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
            Relay
        </div>
        <div class="col-sm-4" style="color:Yellow;text-align: center;vertical-align: middle; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
            Store
        </div>

    </div>
</div>


<style type="text/css">
    body {
        background-image: url(../../stock-internet.jpg);
    }
</style>

<script src="http://code.jquery.com/jquery-2.0.3.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.0/jquery.qtip.js"></script>
<script src="@Url.Content("~/Scripts/cytoscape.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/cytoscape-qtip.js")" type="text/javascript"></script>
@section Scripts{

    <script>

	/* ================================================================================================
										Cytoscape SETUP SECTION
	===================================================================================================*/

	//This converts the Model into JSON data
	var jsonData = @Html.Raw(Json.Encode(Model));
	console.log(jsonData);

	var processingCenter = 0;

	var NetworkElements = {
		nodes: [],
		edges: []
	};

	//initializes the Cytoscape object. (This is what the graph is)
	var cy = cytoscape({
        container: document.getElementById('cy'),
        style: 
        [
			{
				selector: 'node',
				style: {
					//shape: 'data(shape)',
					//shape: 'circle',
					'border-width': '5',
					//'background-color': 'red',
					'background-color': 'data(color)',
					content: 'data(id)',
                    'curve-style': 'bezier',
                    'shape': 'data(shape)'
                },
			},
			{
				selector: 'edge',
				style: {
					'label': 'data(weight)'
				}
			}
        ],
		layout: {
			name: 'preset'
		},
		//RIGHT HERE IS WHERE I GET THE ELEMENTS FROM THE MODEL
		elements: convertToCytoscape()
	});

	// This function converts the JSON representation of the Model into the Cytoscape elements
	function convertToCytoscape() {
		//alert("hi");
		//console.log("Hello..");
		console.log(jsonData.networkEntities);
		for (var p in jsonData.networkEntities) {
			var xLocation = 0;
			var yLocation = 0;
			//if it is a store
            if (jsonData.networkEntities[p].type == 0) {
                //console.log("convert 形状处理");
                NetworkElements.nodes.push({ data: { id: p, color: 'yellow', shape: 'octagon', category: 0, databaseId: jsonData.networkEntities[p].databaseId }, position: { x: jsonData.networkEntities[p].x, y: jsonData.networkEntities[p].y } });
			}
			//if it is a relay
			else if (jsonData.networkEntities[p].type == 1) {
				NetworkElements.nodes.push({ data: { id: p, color: 'blue', shape: 'rectangle', category: 1, databaseId: jsonData.networkEntities[p].databaseId  }, position: { x: jsonData.networkEntities[p].x, y: jsonData.networkEntities[p].y } });
			}
            else if (jsonData.networkEntities[p].type == 2){
				processingCenter = p;
				NetworkElements.nodes.push({ data: { id: p, color: 'red', shape: 'triangle', category: 2, databaseId: jsonData.networkEntities[p].databaseId  }, position: { x: jsonData.networkEntities[p].x, y: jsonData.networkEntities[p].y } });
			}
		}
		//console.log("===========================================================================================");
		for (var q in jsonData.connections) {
			//console.log(jsonData.connections[q]);
			NetworkElements.edges.push({ data: { id: jsonData.connections[q].ip1 + jsonData.connections[q].ip2, source: jsonData.connections[q].ip1, target: jsonData.connections[q].ip2, weight: jsonData.connections[q].weight } });
		}
        console.log("看看shape是啥", NetworkElements);
		return NetworkElements;
	}

	/* ================================================================================================
										EXPORT NODE POSITION SECTION
	===================================================================================================*/

	// this sends the (X,Y) locations of the nodes to the database to be stored.
	function exportPositions() {//cy
		var list = [];
		var nodes = cy.nodes();
        for (var i = 0; i < nodes.length; i++) {
            var obj = {};
            obj['id'] = nodes[i].id();
            obj['pos'] = nodes[i].position();
            obj['type'] = nodes[i].category;
            list.push(obj);
        }

		list = JSON.stringify({
			'nodePosition': list
		});

		console.log(list);

		var url = 'Network/NodePositions';
		$.ajax({
			type: 'POST',
			url: url,
			data: list,
			dataType: 'json',
			contentType: 'application/json;charset=utf-8',
			success: function (data) { alert(data); },
			failure: function (errMsg) {
				alert(errMsg);
			}
		});
	}



	/* ================================================================================================
										ANIMATION SECTION
	===================================================================================================*/
	var animations = [];

	//Calculates the shortest path to the Processing Center
	var dijkstra = cy.elements().dijkstra(cy.getElementById(processingCenter), function (edge) {
		//console.log(processingCenter);
		//console.log(cy.elements());
		return edge.data('weight');
	});

	// When one of the transaction "Send" buttons are clicked, this is called which starts the animation
	$(".SendTransaction").click(function () {
		// Holds the product ID of the clicked element
		var storeIp = $(this).attr('id');
		//console.log(storeIp);
		var pathToJ = dijkstra.pathTo(cy.getElementById(storeIp));
		var i = pathToJ.length;
		/*console.log(i);
		console.log(pathToJ);
		console.log("=============================================================");*/
		recursivePath(pathToJ, pathToJ[i - 1], i - 1);
	});

	//Starts the animation on the click of a node


       

	//This function recursively calls itself to do the animation from node to node. the elements from the Store to the Processing
	// Center are stored in the 'stack' parameter, while the current element is the 'item', and the current index is 'i'.
	//once this is done, it calls the promise function, which reverses the animation by calling backTrackAnimation
	function recursivePath(stack, item, i) {
		var ann = cy.getElementById(item._private.data.id).animation({
			style: {
				'background-color': 'white',
				'width': 50,
				'height': 50
			},
			duration: 1000
			});
		animations.push(ann);

		ann
			.play() // start
			.promise('completed').then(function () { // on next completed
				i--;
				ann.reverse().rewind().play();
				animations.pop();
				if (i > 0) { // was >=
					return recursivePath(stack, stack[i], i ); // i
				}
				return backTrackAnimation(stack, stack[0], 0);
		});
	}

	//This function is exactly the same as the recursivePath function, except it goes from the ProcessingCenter back to the Store.
	function backTrackAnimation(stack, item, i) {
		var ann = cy.getElementById(item._private.data.id).animation({
			style: {
				'background-color': 'green',
				'width': 50,
				'height':50
			},
			duration: 1000
		});
		animations.push(ann);

		ann
			.play() // start
			.promise('completed').then(function () { // on next completed
				ann.reverse().rewind().play();
				animations.pop();
				i++;
				if (i < stack.length) {
					return backTrackAnimation(stack, stack[i], i);
				}
				resetElements(stack);
				return;
			});
	}

	//Not used yet, but this method is called once the animation is complete.
	function resetElements(stack) {
		/*console.log("DONE+====================");
		cy.style().resetToDefault() ;
		stack.forEach(function (element) {
			console.log(element);
		});*/
	}


		/* ================================================================================================
										PAUSE/PLAY SECTION
		===================================================================================================*/


		//Working on pause and play, however it only works with one element on the "animation list" at a time.
		//This is because there are multiple "threads"/"listeners" which begin each animation cycle, so the animations
		//aren't running concurrently. To do more than one, there will have to be a way to either tie them together,
		//or use some sort of javascript Mutex / Lock that must be used .
		$(".PauseButton").click(function () {
			console.log("Stopped!");
			animations.forEach(function (element) {
				console.log(element);
				element.pause();
			});
		});

		$(".PlayButton").click(function () {
			animations.forEach(function (element) {
				console.log(element);
				element.play();
			});
		});


		/* ================================================================================================
										Modal Popup section (clicking on an element in the graph)
		===================================================================================================*/
		// Popup info and queue
		/*cy.nodes().qtip({
			content: function () {
				popupInformation( this.data('databaseId'), this.data('category') );// sending popupInformation(Id, node type)
				return this.id() + ", Queue: ";
				
			},
			position: {
				my: 'top center',
				at: 'bottom center'
			},
			style: {
				classes: 'qtip-bootstrap',
				tip: {
					width: 16,
					height: 8
				}
			}
		});*/
		cy.on('click', 'node', function (evt) {
			popupInformation(this.data('databaseId'), this.data('category'));// sending popupInformation(Id, node type)
			
		});

		function popupInformation(id,type) {
			console.log(id + " clicked!");
			//return;

			if (id != null) {
				var DEST = "/Network/GetNodeInformation?id=" +id+"&type="+type;
				$.ajax({
					url: DEST,
					contentType: 'application/html; charset=utf-8',
					type: 'GET',
					dataType: 'html'

				})
					.success(function (result) {
						$("#NodePopup").html(result);
						$("#myModal").modal()

					})
					.error(function (xhr, status) {
						alert(status);
					})
			}
			else {
				$("#NodePopup").html("");
			}
		}
    </script>
}
