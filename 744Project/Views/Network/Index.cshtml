@model _744Project.ViewModels.NetworkViewModel

@{
    ViewBag.Title = "Network";
}
<link rel="stylesheet" type="text/css" href="http://cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.0/jquery.qtip.css">


<!--Here is where the popup MODAL javascript is going. This is for when the nodes are clicked on-->
<div class="modal fade" id="myModal" role="dialog">
	<div class="modal-dialog">

		<!-- Modal content-->
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Network Element Overview</h4>
			</div>
			<div id="NodePopup" class="modal-body">

			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
			</div>
		</div>

	</div>
</div>
<!-- End of Modal section -->



<div class="row">
    <div class="panel panel-default" style="margin-top:10px">
        <div class="panel-body">
            <div class="col-sm-4">
                <button class="PauseButton btn btn-danger">pause</button>
                <button class="PlayButton btn btn-success">play</button>
            </div>
            <div class="col-sm-4">
                <h3 style="text-align: center;vertical-align: middle;">Network Layout</h3>
            </div>
            <div class="col-sm-4" style=" display: flex; align-items: center; justify-content: center;">
                <input id="clickMe" style="display: block; margin-top: 10px;" class="btn btn-default" type="button" value="Save Configuration" onclick="exportPositions();" />
            </div>
        </div>
    </div>
</div>

<div class="panel panel-default" style=" height: 500px; width:100%;">
    <div id="cy" class="panel-body" style="height: 500px; width:100%;">
    </div>
</div>


<div class="panel panel-default">
    <div class="panel-body">
        <div class="row">
            <table class="table table-bordered">
                <tr><th>Transaction Id</th><th>Store Ip</th><th>Encrypted Amount</th><th>Action</th></tr>
                @foreach (var trans in Model.transactions)
                {
                    <tr>
                        <td>@trans.Id</td>
                        <td>@trans.storeIp</td>
                        <td>@trans.transactionAmount</td>
                        <td id="@trans.Id"><button class="SendTransaction btn btn-default" id="@trans.storeIp">Send</button></td>
                    </tr>
                }
            </table>

        </div>
        <div class="col-sm-4" style="color:Red;text-align: center;vertical-align: middle; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
            Processing Center
        </div>
        <div class="col-sm-4" style="color:Blue;text-align: center;vertical-align: middle; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
            Relay
        </div>
        <div class="col-sm-4" style="color:Yellow;text-align: center;vertical-align: middle; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
            Store
        </div>

    </div>
</div>


<style type="text/css">
    body {
        background-image: url(../../stock-internet.jpg);
    }
</style>

<script src="http://code.jquery.com/jquery-2.0.3.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.0/jquery.qtip.js"></script>
<script src="@Url.Content("~/Scripts/cytoscape.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/cytoscape-qtip.js")" type="text/javascript"></script>
@section Scripts{

    <script>

		/* ================================================================================================
											Cytoscape SETUP SECTION
		===================================================================================================*/

		//This converts the Model into JSON data
		var jsonData = @Html.Raw(Json.Encode(Model));
	   console.log(jsonData);

	var processingCenter = 0;

	//
	var NetworkElements = {
		nodes: [],
		edges: []
	};

	//initializes the Cytoscape object. (This is what the graph is)
	var cy = cytoscape({
        container: document.getElementById('cy'),
        style:
        [
			{
				selector: 'node',
				style: {
					'border-width': '5',
					//'background-color': 'red',
					'background-color': 'data(color)',
					content: 'data(id)',
                    'curve-style': 'bezier',
                    'shape': 'data(shape)'
                },
			},
			{
				selector: 'edge',
				style: {
					'label': 'data(weight)'
				}
            },
            {
                selector: ':selected',
                css: {
                    'background-color': 'green',
                    'line-color': 'black',

                }
            }
        ],
		layout: {
			name: 'preset'
		},
		//RIGHT HERE IS WHERE I GET THE ELEMENTS FROM THE MODEL
		elements: convertToCytoscape()
	});

	// This function converts the JSON representation of the Model into the Cytoscape elements
	function convertToCytoscape() {
		//alert("hi");
		//console.log("Hello..");
		console.log(jsonData.regions);

        //change to use region
        NetworkElements.nodes.push({ data: { id: 1, color: 'grey', shape: 'rectangle' } });
        NetworkElements.nodes.push({ data: { id: 2, color: 'grey', shape: 'rectangle' } });
        NetworkElements.nodes.push({ data: { id: 3, color: 'grey', shape: 'rectangle' } });
        NetworkElements.nodes.push({ data: { id: 4, color: 'grey', shape: 'rectangle' } });

        for (var p in jsonData.regions) {
            var xLocation = 0;
            var yLocation = 0;
            for (var i in jsonData.regions[p].networkEntities) {
                 //if it is a store
                if (jsonData.regions[p].networkEntities[i].type == 0) {
                    NetworkElements.nodes.push({ data: { id: i, color: 'yellow', shape: 'octagon', parent: p, category: 0, databaseId: jsonData.regions[p].networkEntities[i].databaseId }, position: { x: jsonData.regions[p].networkEntities[i].x, y: jsonData.regions[p].networkEntities[i].y } });
                }
                //if it is a relay
                else if (jsonData.regions[p].networkEntities[i].type == 1) {
                    if (jsonData.regions[p].networkEntities[i].isGateway) {//gateway represent other color
                        NetworkElements.nodes.push({ data: { id: i, color: 'green', shape: 'rectangle', parent: p, category: 1, isActive: jsonData.regions[p].networkEntities[i].isActive, databaseId: jsonData.regions[p].networkEntities[i].databaseId }, position: { x: jsonData.regions[p].networkEntities[i].x, y: jsonData.regions[p].networkEntities[i].y } });
                    } else {
                        NetworkElements.nodes.push({ data: { id: i, color: 'blue', shape: 'rectangle', parent: p, category: 1, isActive: jsonData.regions[p].networkEntities[i].isActive, databaseId: jsonData.regions[p].networkEntities[i].databaseId }, position: { x: jsonData.regions[p].networkEntities[i].x, y: jsonData.regions[p].networkEntities[i].y } });
                    }
                }
            }
		}
		console.log("===========================================================================================");
        //add processing center which is from processingCenter
        NetworkElements.nodes.push({ data: { id: jsonData.processingCenter.ip, color: 'red', shape: 'triangle', category: 2, databaseId: jsonData.processingCenter.databaseId }, position: { x: jsonData.processingCenter.x, y: jsonData.processingCenter.y } });

		//console.log("===========================================================================================");
		for (var q in jsonData.connections) {
			//console.log(jsonData.connections[q]);
			NetworkElements.edges.push({ data: { id: jsonData.connections[q].ip1 + jsonData.connections[q].ip2, source: jsonData.connections[q].ip1, target: jsonData.connections[q].ip2, weight: jsonData.connections[q].weight } });
        }
		return NetworkElements;
	}

	/* ================================================================================================
										EXPORT NODE POSITION SECTION
	===================================================================================================*/

	// this sends the (X,Y) locations of the nodes to the database to be stored.
	function exportPositions() {//cy
		var list = [];
		var nodes = cy.nodes();
		console.log(nodes);
		console.log("=============================");
        for (var i = 0; i < nodes.length; i++) {
            var obj = {};
            obj['id'] = nodes[i].id();
			obj['pos'] = nodes[i].position();
			console.log(jsonData.networkEntities);
			console.log(nodes[i]);
			if (nodes[i].id() != 1 && nodes[i].id() != 2 && nodes[i].id() != 3 && nodes[i].id() != 4) {
				console.log(jsonData.networkEntities[obj['id']]);
				//obj['category'] = jsonData.networkEntities[obj['id']].type;//nodes[i].category;
				obj['isActive'] = jsonData.networkEntities[obj['id']].isActive;
			}
			else {
				//obj['category'] = -1;
				obj['isActive'] = true;
			}

            list.push(obj);
        }

		list = JSON.stringify({
			'nodePosition': list
		});

		console.log(list);

		var url = '/Network/NodePositions';//'Network/NodePositions';
		$.ajax({
			type: 'POST',
			url: url,
			data: list,
			dataType: 'json',
			contentType: 'application/json;charset=utf-8',
			success: function (data) { alert(data); },
			failure: function (errMsg) {
				alert(errMsg);
			}
		});
	}

	/* ================================================================================================
										Send Transaction SECTION
		-This is called when one of the "send" buttons are clicked next to a transaction on the bottom of the main screen
		-Currently:
			-the transaction is sent to the Processing Center's queue (where it can then be seen once the PC is clicked on)
		-What needs to be done:
			-compute the path and implement the queues between nodes
	===================================================================================================*/
		var processingCenterQueue = []; //once the AJAX call is made (for clicking on a Processing Center), this is used to
										// show what is on the queue. The call pulls the GetNodeInformation.cshtml into the
										//javascript modal as a partial view. You can see in the javascript of that page
										// that it dynamically adds the items in the queue to its HTML with a for each loop
				//you are going to want to do this for general relays and their queues. it will be the same process, but the 
				//data will be coming from a different place.

		// When one of the transaction "Send" buttons are clicked, this is called which starts the animation
		$(".SendTransaction").click(function () {
			// Holds the product ID of the clicked element,this code is just for the old animation
			var storeIp = $(this).attr('id');
			var transitionID = document.getElementById(storeIp).parentNode.id;
			queue.push(transitionID);
			var pathToJ = dijkstra.pathTo(cy.getElementById(storeIp));
			console.log("pathToJ: ", pathToJ);
			var i = pathToJ.length;
			recursivePath(pathToJ, pathToJ[i - 1], i - 1);


			//TEMPORARY TO DEMONSTRATE HOW TO USE THE PROCESS TRANSACTION FUNCTIONALITY
			//This just sends the transaction straight to the processingCenterQueue, where it can then be processed
			var transactionId = $(this).parent().attr("id");
			console.log("Transactdion: " + transactionId);
			processingCenterQueue.push(transactionId);
			console.log(processingCenterQueue);
		});


	/* ================================================================================================
										ANIMATION SECTION
	===================================================================================================*/
        var animations = [];
		var queue = [];
		

	//Calculates the shortest path to the Processing Center
	var dijkstra = cy.elements().dijkstra(cy.getElementById(processingCenter), function (edge) {
		//console.log(processingCenter);
		//console.log(cy.elements());
		return edge.data('weight');
	});

	

	//Starts the animation on the click of a node

	//This function recursively calls itself to do the animation from node to node. the elements from the Store to the Processing
	// Center are stored in the 'stack' parameter, while the current element is the 'item', and the current index is 'i'.
	//once this is done, it calls the promise function, which reverses the animation by calling backTrackAnimation
	function recursivePath(stack, item, i) {
		var ann = cy.getElementById(item._private.data.id).animation({
			style: {
				'background-color': 'white',
				'width': 50,
				'height': 50
			},
			duration: 1000
			});
		animations.push(ann);

		ann
			.play() // start
			.promise('completed').then(function () { // on next completed
				i--;
				ann.reverse().rewind().play();
				animations.pop();
				if (i > 0) { // was >=
					return recursivePath(stack, stack[i], i ); // i
				}
				return backTrackAnimation(stack, stack[0], 0);
		});
	}

	//This function is exactly the same as the recursivePath function, except it goes from the ProcessingCenter back to the Store.
	function backTrackAnimation(stack, item, i) {
		var ann = cy.getElementById(item._private.data.id).animation({
			style: {
				'background-color': 'green',
				'width': 50,
				'height':50
			},
			duration: 1000
		});
		animations.push(ann);

		ann
			.play() // start
			.promise('completed').then(function () { // on next completed
				ann.reverse().rewind().play();
				animations.pop();
				i++;
				if (i < stack.length) {
					return backTrackAnimation(stack, stack[i], i);
				}
				resetElements(stack);
				return;
			});
	}

	//Not used yet, but this method is called once the animation is complete.
	function resetElements(stack) {
		/*console.log("DONE+====================");
		cy.style().resetToDefault() ;
		stack.forEach(function (element) {
			console.log(element);
		});*/
	}


		/* ================================================================================================
										PAUSE/PLAY SECTION
		===================================================================================================*/


		//Working on pause and play, however it only works with one element on the "animation list" at a time.
		//This is because there are multiple "threads"/"listeners" which begin each animation cycle, so the animations
		//aren't running concurrently. To do more than one, there will have to be a way to either tie them together,
		//or use some sort of javascript Mutex / Lock that must be used .
		$(".PauseButton").click(function () {
			console.log("Stopped!");
			animations.forEach(function (element) {
				console.log(element);
				element.pause();
			});
		});

		$(".PlayButton").click(function () {
			animations.forEach(function (element) {
				console.log(element);
				element.play();
			});
		});


		/* ================================================================================================
										Modal Popup section (clicking on an element in the graph)
		===================================================================================================*/
	
		cy.on('click', 'node', function (evt) {
			popupInformation(this.data('databaseId'), this.data('category'));// sending popupInformation(Id, node type)

		});

		function popupInformation(id,type) {
			console.log(id + " clicked!");
			//return;

			if (id != null ){//&& type != 2) {
				var DEST = "/Network/GetNodeInformation?id=" +id+"&type="+type;
				$.ajax({
					url: DEST,
					contentType: 'application/html; charset=utf-8',
					type: 'GET',
					dataType: 'html'

				})
					.success(function (result) {
						$("#NodePopup").html(result);
						$("#myModal").modal()
						if (type == 2) {
							console.log("PC clicked ... ");
							processingCenterQueue.forEach(function (element) {
								console.log(element);
								$("#PCTransactionList").append('<div class="btn btn-default processTransactionBtn" id="' + element + '"onclick="processTransactionButton('+element+')">' +
									'Process transaction: '+element +
									'</div>');
							});
						}
					})
					.error(function (xhr, status) {
						alert(status);
					})
			}
			/*else if (itype == 2) {
				console.log("PC clicked...");
			}*/
			else {
				$("#NodePopup").html("");
			}


		}

		// this is the activate / inactivate
		function Activate(id, type, ip) { //type 1 is relay
			//console.log("testing 1 2 3");
			//console.log(id);
			if (id != null) {
				var list = [];
				var obj = {};
				obj['id'] = id;
				//obj['isActive'] = Model.isActive;
				obj['type'] = type;
				list.push(obj);
				list = JSON.stringify({
					'nodePosition': list
				});
				obj = JSON.stringify(obj);
				console.log(obj);

				//sets the javascript value (of isActive) to true/ false
				var element = cy.getElementById(ip);
				console.log(ip);
				console.log(element);
				console.log(element._private.data);

				//this js call updates the active/inactive in the js
				element._private.data.isActive = !element._private.data.isActive;

				//here is where you change how something looks if it is active or inactive after the call..
				
				//this ajax call updates the database
				var url = '/Network/SaveNoteInformation';
				$.ajax({
					type: 'POST',
					url: url,
					data: obj,
					dataType: 'json',
					contentType: 'application/json;charset=utf-8',
					success: function (data) {
						alert(data);
						$("#NodePopup").html("");
						$("#NodePopup").modal('hide');
					},
					failure: function (errMsg) {
						alert(errMsg);
						$("#NodePopup").html("");
					}
				});
				//hides the modal after success
				$("#NodePopup").html("");
				$('#myModal').modal('hide')
			}
			else {
				$("#NodePopup").html("");
			}
		}

		/* ================================================================================================
										Process Transaction Section 
			-This is called when one of the transactions are clicked on (on the Processing Center popup window)
			-It retuns a status response that prints out to the console right now. 
		===================================================================================================*/

		function processTransactionButton(event) {
			console.log("this transaction was clicked: " + event);

			obj = {};
			obj['transId'] = event;
			obj = JSON.stringify(obj);
			console.log(obj);
			var url = '/Transactions/ProcessTransaction';
			$.ajax({
				type: 'POST',
				url: url,
				data: obj,
				dataType: 'json',
				contentType: 'application/json;charset=utf-8',
				success: function (response) {
					console.log("returned correctly...");
					//if the transaction succeeded.
					if (response.success) {
						console.log(response.responseText);
					}
					//if the transaction failed.
					else {
						// DoSomethingElse()
						console.log(response.responseText);
					}
				},
				failure: function (errMsg) {
					console.log("bad bug");
				}
			});
		}


    </script>
}
