@model _744Project.ViewModels.NetworkViewModel

@{
    ViewBag.Title = "Network";
}


<script src="@Url.Content("~/Scripts/cytoscape.js")" type="text/javascript"></script>

<div class="row">
	<div style="width: 80%;
        height: 10%;
        position: absolute;
        top: 8%;
        left: 10%;
		border: 2px solid gray;
		border-radius: 5px;
		background-color:white;
	 ">
		<div class="col-sm-4">
		</div>
		<div class="col-sm-4">
			<h3 style="text-align: center;vertical-align: middle;">Network Layout</h3>
		</div>
		<div class="col-sm-4" style=" display: flex; align-items: center; justify-content: center;">
			<input id="clickMe"   style="display: block; margin-top: 10px;" class="btn btn-default" type="button" value="Save Configuration" onclick="exportPositions();" />
		</div>

		</div>
	<div class="" id="cy" style="width: 80%;
        height: 60%;
        position: absolute;
        top: 20%;
        left: 10%;
		border: 2px solid gray;
		border-radius: 5px;
		background-color:white;
	 ">
	</div>

	<div style="width: 80%;
        height: 5%;
        position: absolute;
        top: 82%;
        left: 10%;
		border: 2px solid gray;
		border-radius: 5px;
		background-color:white;">
		<div class="col-sm-4" style="color:Red;text-align: center;vertical-align: middle; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
			Processing Center
		</div>
		<div class="col-sm-4" style="color:Blue;text-align: center;vertical-align: middle; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
			Relay
		</div>
		<div class="col-sm-4" style="color:Yellow;text-align: center;vertical-align: middle; text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">
			Store
		</div>
	</div>
</div>

<style type="text/css">
	body {
		background-image: url(../../stock-internet.jpg);
	}
	
</style>




@section Scripts{

<script>
	var jsonData = @Html.Raw(Json.Encode(Model));

	var processingCenter = 0;

	var NetworkElements = {
		nodes: [],
		edges: []
	};

	function convertToCytoscape() {
		//alert("hi");
		console.log("Hello..");
		console.log(jsonData.networkEntities);
		for (var p in jsonData.networkEntities) {
			var xLocation = 0;
			var yLocation = 0;
			//console.log(p);
			//console.log(jsonData.networkEntities[p].type);
			//if it is a store
			if (jsonData.networkEntities[p].type == 0) {
				NetworkElements.nodes.push({ data: { id: p, color: 'yellow', shape: 'square', category: 0 }, position: { x: jsonData.networkEntities[p].x, y: jsonData.networkEntities[p].y } });
			}
			//if it is a relay
			else if (jsonData.networkEntities[p].type == 1) {
				NetworkElements.nodes.push({ data: { id: p, color: 'blue', shape: 'circle', category: 1 }, position: { x: jsonData.networkEntities[p].x, y: jsonData.networkEntities[p].y } });
			}
			else {
				processingCenter = p;
				NetworkElements.nodes.push({ data: { id: p, color: 'red', shape: 'triangle', category: 2 }, position: { x: jsonData.networkEntities[p].x, y: jsonData.networkEntities[p].y } });
			}
			//NetworkElements.nodes.push({ data: { id: p } });
			
		}
		console.log("===========================================================================================");
		for(var q in jsonData.connections){
			//console.log(jsonData.connections[q]);
			NetworkElements.edges.push({ data: { id: jsonData.connections[q].ip1 + jsonData.connections[q].ip2, source: jsonData.connections[q].ip1, target: jsonData.connections[q].ip2, weight: jsonData.connections[q].weight} });
		}

		return NetworkElements;
	}

	var cy = cytoscape({
		container: document.getElementById('cy'),
		style: [
			{
				selector: 'node',
				style: {
					//shape: 'data(shape)',
					shape: 'circle',
					'border-width': '5',
					//'background-color': 'red',
					'background-color': 'data(color)',
					content: 'data(id)',
					'curve-style': 'bezier'
				}
			},
			{
				selector: 'edge',
				style: {
					'label': 'data(weight)'
				}
			}
		],
		layout: {
			name: 'preset'
		},
		elements: convertToCytoscape()
	});	


	testData()
	function testData() {
		console.log(NetworkElements);
		console.log(processingCenter);
		console.log(cy.getElementById(processingCenter));
		return testData;
	}
	

	function exportPositions() {//cy
		var list = [];
		var nodes = cy.nodes();
		for (var i = 0; i < nodes.length; i++) {
			var obj = {};
			obj['id'] = nodes[i].id();
			obj['pos'] = nodes[i].position();
			obj['type'] = nodes[i].category;
			list.push(obj);
		}
		

		list = JSON.stringify({
			'nodePosition': list
		});
		

		console.log(list);

		var url = 'Network/NodePositions';
		$.ajax({
			type: 'POST',
			url: url,
			data: list,
			dataType: 'json',
			contentType: 'application/json;charset=utf-8',
			success: function (data) { alert(data); },
			failure: function (errMsg) {
				alert(errMsg);
			}
		});
	}


	cy.nodes().animate({
		style: { 'background-color': 'cyan' }
	}, {
			duration: 5000,
			complete: function () {
				console.log('Animation complete');
			}
		});

	console.log('Animating nodes...');

	setTimeout(function () {
		console.log('Stopping nodes animation');
		cy.nodes().stop();
	}, 2500);

	cy.$('#1').on('tap', function (evt) {
		console.log('tap ' + evt.target.id());
	});

	var dijkstra = cy.elements().dijkstra(cy.getElementById(processingCenter), function (edge) {
		//console.log(processingCenter);
		//console.log(cy.elements());
		return edge.data('weight');
	});

	cy.on('click', 'node', function (evt) {
		console.log('clicked ' + this.id());
		var pathToJ = dijkstra.pathTo(cy.getElementById(this.id()));
		console.log(pathToJ);
	});

</script>
}